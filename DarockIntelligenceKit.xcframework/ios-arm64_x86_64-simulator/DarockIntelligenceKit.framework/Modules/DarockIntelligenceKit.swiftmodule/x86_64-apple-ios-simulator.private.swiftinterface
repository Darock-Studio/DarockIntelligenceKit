// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DarockIntelligenceKit
import Combine
@_exported import DarockIntelligenceKit
import Dispatch
import Foundation
import MobileCoreServices
import OSLog
import Security
import Swift
import SystemConfiguration
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public enum IntelligenceModel : Swift.String {
  case deepseekR1_1p5b
  case deepseekR1_7b
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct IntelligenceChatMessage : Swift.Codable {
  public init(role: DarockIntelligenceKit.IntelligenceChatMessage.Role, content: Swift.String)
  @frozen public enum Role : Swift.String, Swift.Codable {
    case system
    case user
    case assistant
    case tool
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IntelligenceAskResponse {
}
extension DarockIntelligenceKit.IntelligenceAskResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct IntelligenceChatResponse {
}
extension DarockIntelligenceKit.IntelligenceChatResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public func intelligenceAsk(_ model: DarockIntelligenceKit.IntelligenceModel, about prompt: Swift.String, streaming: Swift.Bool = true, handler: @escaping (Swift.Result<DarockIntelligenceKit.IntelligenceAskResponse, any Swift.Error>) -> Swift.Void)
public func intelligenceChat(with model: DarockIntelligenceKit.IntelligenceModel, about messages: [DarockIntelligenceKit.IntelligenceChatMessage], streaming: Swift.Bool = true, handler: @escaping (Swift.Result<DarockIntelligenceKit.IntelligenceChatResponse, any Swift.Error>) -> Swift.Void)
extension DarockIntelligenceKit.IntelligenceModel : Swift.Equatable {}
extension DarockIntelligenceKit.IntelligenceModel : Swift.Hashable {}
extension DarockIntelligenceKit.IntelligenceModel : Swift.RawRepresentable {}
extension DarockIntelligenceKit.IntelligenceChatMessage.Role : Swift.Equatable {}
extension DarockIntelligenceKit.IntelligenceChatMessage.Role : Swift.Hashable {}
extension DarockIntelligenceKit.IntelligenceChatMessage.Role : Swift.RawRepresentable {}
extension DarockIntelligenceKit.IntelligenceChatMessage.Role : Swift.Sendable {}
extension DarockIntelligenceKit.IntelligenceChatMessage.Role : Swift.BitwiseCopyable {}
